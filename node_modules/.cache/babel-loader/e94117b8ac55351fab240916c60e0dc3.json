{"ast":null,"code":"var _jsxFileName = \"/Users/amnahabdulal/Desktop/websites/react/covid-tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recover\n  },\n  country\n}) => {\n  const [dailyData, setDailyDate] = useState([]);\n  useEffect(() => {\n    const fetchApi = async () => {\n      setDailyDate(await fetchDailyData());\n    };\n\n    fetchApi();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(250,0,0,0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }) : null;\n  const barChar = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)']\n      }],\n      data: [confirmed.value, recovered.value, deaths.value]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, country ? barChar : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/amnahabdulal/Desktop/websites/react/covid-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","data","confirmed","recover","country","dailyData","setDailyDate","fetchApi","lineChart","length","labels","map","date","datasets","label","borderColor","fill","deaths","backgroundColor","barChar","value","recovered","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAIA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAC;AAACC,IAAAA,SAAD;AAAaC,IAAAA;AAAb,GAAP;AAA8BC,EAAAA;AAA9B,CAAD,KAA6C;AACvD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAC,MAAMR,cAAc,EAArB,CAAZ;AACH,KAFD;;AAGAS,IAAAA,QAAQ;AACX,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBAEQ,oBAAC,IAAD;AACI,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADN;AAEFC,MAAAA,QAAQ,EAAE,CACN;AACIZ,QAAAA,IAAI,EAAEI,SAAS,CAACM,GAAV,CAAc,CAAC;AAAET,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADV;AAEIY,QAAAA,KAAK,EAAE,UAFX;AAGIC,QAAAA,WAAW,EAAE,SAHjB;AAIIC,QAAAA,IAAI,EAAE;AAJV,OADM,EAON;AACIf,QAAAA,IAAI,EAAEI,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEM,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADV;AAEIH,QAAAA,KAAK,EAAE,QAFX;AAGIC,QAAAA,WAAW,EAAE,KAHjB;AAIIG,QAAAA,eAAe,EAAE,mBAJrB;AAKIF,QAAAA,IAAI,EAAE;AALV,OAPM;AAFR,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,GAoBc,IArBlB;AAyBA,QAAMG,OAAO,GACTjB,SAAS,gBAED,oBAAC,GAAD;AACI,IAAA,IAAI,EAAE;AACFQ,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFG,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,QADA;AAEPI,QAAAA,eAAe,EAAE,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD;AAFV,OAAD,CAFR;AAMFjB,MAAAA,IAAI,EAAE,CAACC,SAAS,CAACkB,KAAX,EAAkBC,SAAS,CAACD,KAA5B,EAAmCH,MAAM,CAACG,KAA1C;AANJ,KADV;AASI,IAAA,OAAO,EAAE;AACLE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADH;AAELC,MAAAA,KAAK,EAAE;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAG,oBAAmBrB,OAAQ;AAAnD;AAFF,KATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,GAgBD,IAjBZ;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAEL,MAAM,CAAC2B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,OAAO,GAAGe,OAAH,GAAaX,SADzB,CADJ;AAKH,CA3DD;;AA6DA,eAAeR,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\n\n\n\nconst Chart = ({ data:{confirmed , recover}, country }) => {\n    const [dailyData, setDailyDate] = useState([]);\n\n    useEffect(() => {\n        const fetchApi = async () => {\n            setDailyDate(await fetchDailyData());\n        }\n        fetchApi();\n    }, []);\n\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line\n                    data={{\n                        labels: dailyData.map(({ date }) => date),\n                        datasets: [\n                            {\n                                data: dailyData.map(({ confirmed }) => confirmed),\n                                label: 'Infected',\n                                borderColor: '#3333ff',\n                                fill: true\n                            },\n                            {\n                                data: dailyData.map(({ deaths }) => deaths),\n                                label: 'Deaths',\n                                borderColor: 'red',\n                                backgroundColor: 'rgba(250,0,0,0.5)',\n                                fill: true\n                            }],\n                    }}\n                />) : null\n\n    );\n\n    const barChar = (\n        confirmed\n            ? (\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                        }],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: { display: true, text: `Current state in ${country}` }\n                    }}\n                />\n            ) : null\n    );\n    return (\n        <div className={styles.container}>\n            {country ? barChar : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}